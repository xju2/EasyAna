#!/usr/bin/env python

import os
import ray
import time
import argparse
from redis.exceptions import ConnectionError


def wait_on_head():

    redis_password = os.environ.get("RAY_REDIS_PASSWORD", None)
    ray_ip = os.environ.get("RAY_HEAD_IP", None)
    redis_port = os.environ.get("RAY_REDIS_PORT", None)

    if redis_password is None or redis_port is None or ray_ip is None:
        print("Set RAY_RAY_REDIS_PASSWORD, RAY_RAY_REDIS_PORT, RAY_RAY_HEAD_IP vars")
        exit(1)

    while not ray.is_initialized():
        try:
            print("waiting for ray to initialize... %s:%s, %s" % (ray_ip, redis_port, redis_password))
            ray.init(address="%s:%s" % (ray_ip, redis_port), redis_password=redis_password)
        except (ConnectionError, ValueError):
            time.sleep(1)
            print("ray not yet initialized...")


def wait_workers():
    nworkers = os.environ.get("SLURM_JOB_NUM_NODES", None)

    if nworkers is None:
        print("Set SLURM_JOB_NUM_NODES var")
        exit(1)

    nworkers = int(nworkers) - 1
    # wait for all workers to connect
    while len(ray.nodes()) < nworkers + 1:
        print("%s/%s workers connected..." % (len(ray.nodes())-1, nworkers))
        time.sleep(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Wait on ray head node or workers to connect')
    parser.add_argument('--wait-workers', action='store_true')
    args = parser.parse_args()
    wait_on_head()
    if args.wait_workers:
        wait_workers()
